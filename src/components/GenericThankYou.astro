---
import Button from './ui/Button.astro';

export interface Props {
  config: {
    title: string;
    message: string;
    buttons: {
      primary: {
        text: string;
        url: string;
        openInNewTab: boolean;
      };
      secondary?: {
        text: string;
        url: string;
        openInNewTab: boolean;
      };
    };
  };
  locale: 'en' | 'es';
}

const { config, locale } = Astro.props;

// Smart URL handling function - keep placeholders as-is, they'll be replaced client-side
function getButtonProps(button: { url: string; openInNewTab: boolean }) {
  const processedUrl = button.url;
  const isExternalUrl = processedUrl.startsWith('http://') || processedUrl.startsWith('https://');
  const shouldOpenInNewTab = button.openInNewTab ?? isExternalUrl;

  return {
    href: processedUrl,
    target: shouldOpenInNewTab ? '_blank' : undefined,
    rel: shouldOpenInNewTab && isExternalUrl ? 'noopener noreferrer' : undefined,
    // Add data attribute to identify buttons that need dynamic URL replacement
    dataDynamic: button.url.includes('{dynamicPaymentUrl}') ? 'payment' : undefined
  };
}

const primaryButtonProps = getButtonProps(config.buttons.primary);
const secondaryButtonProps = config.buttons.secondary ? getButtonProps(config.buttons.secondary) : null;
---

<section class="thank-you-section">
  <div class="container">
    <div class="thank-you-container">
      <div class="thank-you-wrapper">
        <!-- Success Icon -->
        <div class="success-icon">
          <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="12" cy="12" r="10" fill="#10b981" />
            <path d="M9 12l2 2 4-4" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </div>

        <h1 class="thank-you-title">{config.title}</h1>
        <p class="thank-you-message">{config.message}</p>

        <!-- Primary Button -->
        <div class="button-section primary-button">
          <Button
            href={primaryButtonProps.href}
            variant="primary"
            size="medium"
            target={primaryButtonProps.target}
            rel={primaryButtonProps.rel}
            data-dynamic={primaryButtonProps.dataDynamic}
          >
            {primaryButtonProps.href.includes('drive.google.com') && (
              <svg class="download-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <polyline points="7,10 12,15 17,10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <line x1="12" y1="15" x2="12" y2="3" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
              </svg>
            )}
            {config.buttons.primary.text}
          </Button>
        </div>

        <!-- Secondary Button (if provided) -->
        {config.buttons.secondary && secondaryButtonProps && (
          <div class="button-section secondary-button">
            <Button
              href={secondaryButtonProps.href}
              variant="outline"
              size="medium"
              target={secondaryButtonProps.target}
              rel={secondaryButtonProps.rel}
              data-dynamic={secondaryButtonProps.dataDynamic}
            >
              {config.buttons.secondary.text}
            </Button>
          </div>
        )}
      </div>
    </div>
  </div>
</section>

<script>
  import { getFlywireUrl } from '../data/campPricingConfig';

  // Handle dynamic payment URL replacement on client side
  document.addEventListener('DOMContentLoaded', () => {
    console.log('üí∞ GenericThankYou client script loaded');

    // Get pricing parameter from current URL
    const urlParams = new URLSearchParams(window.location.search);
    const pricingParam = urlParams.get('pricing') as 'withAccommodation' | 'withoutAccommodation' | null;

    console.log('üí∞ Current URL:', window.location.href);
    console.log('üí∞ Pricing parameter:', pricingParam);

    // Find all buttons with data-dynamic="payment" attribute
    const dynamicButtons = document.querySelectorAll('a[data-dynamic="payment"]');
    console.log('üí∞ Dynamic payment buttons found:', dynamicButtons.length);

    dynamicButtons.forEach((button) => {
      const link = button as HTMLAnchorElement;
      const originalHref = link.getAttribute('href');
      console.log('üí∞ Original button href:', originalHref);

      if (originalHref?.includes('{dynamicPaymentUrl}')) {
        if (pricingParam) {
          const flywireUrl = getFlywireUrl(pricingParam);
          link.setAttribute('href', flywireUrl);
          console.log(`üí∞ Updated button href to Flywire URL for ${pricingParam}:`, flywireUrl);
        } else {
          // Fallback to default pricing
          console.warn('‚ö†Ô∏è No pricing parameter found, using default pricing (withoutAccommodation)');
          const flywireUrl = getFlywireUrl('withoutAccommodation');
          link.setAttribute('href', flywireUrl);
          console.log('üí∞ Updated button href to default Flywire URL:', flywireUrl);
        }
      }
    });
  });
</script>

<style>
  .thank-you-section {
    padding: var(--space-xl) var(--section-inline);
    background: var(--background-primary);
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 60vh;
  }

  .container {
    max-width: var(--max-width);
    margin: 0 auto;
  }

  .thank-you-container {
    max-width: 500px;
    margin: 0 auto;
  }

  .thank-you-wrapper {
    background: var(--background-elevated);
    border-radius: 12px;
    padding: 3rem 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    border: 1px solid var(--border-primary);
    text-align: center;
  }

  .success-icon {
    width: 80px;
    height: 80px;
    margin: 0 auto 2rem;
  }

  .success-icon svg {
    width: 100%;
    height: 100%;
  }

  .thank-you-title {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    color: var(--text-primary);
  }

  .thank-you-message {
    font-size: 1.125rem;
    color: var(--text-secondary);
    margin-bottom: 2rem;
    line-height: 1.6;
  }

  .button-section {
    margin-top: 1.5rem;
  }

  .primary-button {
    margin-bottom: 1rem;
  }

  .secondary-button {
    margin-top: 1rem;
  }

  .download-icon {
    width: 1.25rem;
    height: 1.25rem;
    margin-right: 0.5rem;
  }

  /* Mobile Responsiveness */
  @media (max-width: 768px) {
    .thank-you-section {
      padding: var(--space-l) var(--section-inline);
    }

    .thank-you-wrapper {
      padding: 2rem 1.5rem;
    }

    .thank-you-title {
      font-size: 1.75rem;
    }

    .success-icon {
      width: 60px;
      height: 60px;
    }
  }
</style>