---
import { resolveFormTemplate, isValidTemplate } from '../config/formTemplates';

export interface Props {
  formData: {
    slug: string;
    formTemplate?: 'application' | 'download' | 'contact';
    form: {
      title: string;
      subtitle?: string;
      action?: string;
      fields?: Array<{
        type: 'text' | 'email' | 'select' | 'textarea' | 'checkbox';
        name: string;
        label: string;
        placeholder?: string;
        required: boolean;
        options?: Array<{
          value: string;
          label: string;
        }>;
      }>;
      submitButton?: {
        default: string;
        loading: string;
      };
      confirmationMessage?: string;
    };
  };
  locale: 'en' | 'es';
}

const { formData, locale } = Astro.props;

// Resolve form configuration - either from template or direct config
let resolvedForm;

if (formData.formTemplate && isValidTemplate(formData.formTemplate)) {
  // Use template resolution
  const template = resolveFormTemplate(formData.formTemplate, locale);
  resolvedForm = {
    title: formData.form.title,
    subtitle: formData.form.subtitle,
    action: formData.form.action || template.action,
    fields: template.fields,
    submitButton: formData.form.submitButton || template.submitButton,
    confirmationMessage: formData.form.confirmationMessage || template.confirmationMessage
  };
} else {
  // Use direct form configuration - ensure required fields are present
  if (!formData.form.fields || !formData.form.submitButton || !formData.form.action) {
    throw new Error(`Form "${formData.slug}" must either use a formTemplate or provide complete form configuration (fields, submitButton, action)`);
  }
  resolvedForm = formData.form;
}

const form = resolvedForm;
---

<section class="form-section">
  <div class="container">
    <div class="form-container">
      <div class="form-wrapper">
        <h1 class="form-title">{form.title}</h1>
        {form.subtitle && <p class="form-subtitle">{form.subtitle}</p>}

        <form
          id={`form-${formData.slug}`}
          action={form.action}
          method="POST"
          class="form"
          accept-charset="UTF-8"
          enctype="application/x-www-form-urlencoded"
        >
          <!-- Hidden field to identify form type -->
          <input type="hidden" name="formType" value={formData.slug} />

          {form.fields.map((field) => (
            <div class="form-group">
              {field.type === 'checkbox' ? (
                <!-- Checkbox Field -->
                <div class="checkbox-group">
                  <label class="checkbox-label">
                    <input
                      type="checkbox"
                      id={field.name}
                      name={field.name}
                      value="yes"
                      required={field.required}
                    />
                    <span class="consent-text">
                      {field.label}
                    </span>
                    {field.required && <span class="required">*</span>}
                  </label>
                </div>
              ) : field.type === 'select' ? (
                <!-- Select Field -->
                <>
                  <label for={field.name} class="form-label">
                    {field.label}
                    {field.required && <span class="required">*</span>}
                  </label>
                  <select
                    id={field.name}
                    name={field.name}
                    class="form-input form-select"
                    required={field.required}
                  >
                    <option value="" disabled selected>
                      {field.placeholder}
                    </option>
                    {field.options?.map((option) => (
                      <option value={option.value}>
                        {option.label}
                      </option>
                    ))}
                  </select>
                </>
              ) : field.type === 'textarea' ? (
                <!-- Textarea Field -->
                <>
                  <label for={field.name} class="form-label">
                    {field.label}
                    {field.required && <span class="required">*</span>}
                  </label>
                  <textarea
                    id={field.name}
                    name={field.name}
                    class="form-input form-textarea"
                    placeholder={field.placeholder}
                    required={field.required}
                    rows="4"
                  ></textarea>
                </>
              ) : (
                <!-- Text/Email Fields -->
                <>
                  <label for={field.name} class="form-label">
                    {field.label}
                    {field.required && <span class="required">*</span>}
                  </label>
                  <input
                    type={field.type}
                    id={field.name}
                    name={field.name}
                    class="form-input"
                    placeholder={field.placeholder}
                    required={field.required}
                  />
                </>
              )}
            </div>
          ))}

          <!-- Confirmation Message -->
          {form.confirmationMessage && (
            <div class="form-group">
              <p class="confirmation-message">
                {form.confirmationMessage}
              </p>
            </div>
          )}

          <!-- Submit Button -->
          <div class="form-group">
            <button type="submit" class="submit-button">
              {form.submitButton.default}
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</section>

<style>
  .form-section {
    padding: var(--space-xl) var(--section-inline);
    background: var(--background-primary);
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .container {
    max-width: var(--max-width);
    margin: 0 auto;
  }

  .form-container {
    max-width: 500px;
    margin: 0 auto;
  }

  .form-wrapper {
    background: var(--background-elevated);
    border-radius: 12px;
    padding: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    border: 1px solid var(--border-primary);
  }

  .form-title {
    font-size: 1.75rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    color: var(--text-primary);
    text-align: center;
  }

  .form-subtitle {
    font-size: 1.125rem;
    color: var(--text-secondary);
    margin-bottom: 2rem;
    text-align: center;
    line-height: 1.6;
  }

  .form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-label {
    font-weight: 600;
    color: var(--text-primary);
    font-size: 0.95rem;
  }

  .required {
    color: #ef4444;
    margin-left: 0.25rem;
  }

  .form-input,
  .form-select,
  .form-textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--border-primary);
    border-radius: 6px;
    font-size: 1rem;
    background: var(--background-primary);
    color: var(--text-primary);
    transition: border-color 0.2s, box-shadow 0.2s;
  }

  .form-input:focus,
  .form-select:focus,
  .form-textarea:focus {
    outline: none;
    border-color: #0066cc;
    box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.1);
  }

  .form-input::placeholder,
  .form-textarea::placeholder {
    color: var(--text-muted);
  }

  .form-select {
    cursor: pointer;
    appearance: none;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.75rem center;
    background-repeat: no-repeat;
    background-size: 1.5rem;
    padding-right: 2.5rem;
  }

  .form-textarea {
    resize: vertical;
    min-height: 100px;
  }

  .checkbox-group {
    margin: 1rem 0;
  }

  .checkbox-label {
    display: flex;
    align-items: flex-start;
    cursor: pointer;
    font-size: 0.95rem;
    color: var(--text-primary);
  }

  .checkbox-label input[type="checkbox"] {
    margin-right: 0.75rem;
    margin-top: 0.125rem;
    width: 1.25rem;
    height: 1.25rem;
    cursor: pointer;
    accent-color: #0066cc;
  }

  .checkbox-label .consent-text {
    flex: 1;
    line-height: 1.5;
  }

  .confirmation-message {
    color: var(--text-secondary);
    font-size: 0.9rem;
    line-height: 1.5;
    padding: 1rem;
    background: #f3f4f6;
    border-radius: 6px;
    border: 1px solid #e5e7eb;
  }

  .submit-button {
    width: 100%;
    padding: 0.875rem 1.5rem;
    background: #0066cc;
    color: white;
    font-weight: 600;
    font-size: 1rem;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: background 0.2s, transform 0.1s;
  }

  .submit-button:hover {
    background: #0052a3;
    transform: translateY(-1px);
  }

  .submit-button:active {
    transform: translateY(0);
  }

  .submit-button:disabled {
    background: #9ca3af;
    cursor: not-allowed;
    transform: none;
  }

  /* Mobile Responsiveness */
  @media (max-width: 768px) {
    .form-section {
      padding: var(--space-l) var(--section-inline);
    }

    .form-wrapper {
      padding: 1.5rem;
    }

    .form-input,
    .form-select,
    .form-textarea {
      font-size: 16px; /* Prevents zoom on iOS */
    }
  }
</style>

<script define:vars={{ formData, form, locale }}>
  // Handle form submission with JavaScript redirect
  document.addEventListener('DOMContentLoaded', function() {
    const formElement = document.getElementById(`form-${formData.slug}`);

    if (!formElement) return;

    formElement.addEventListener('submit', async function(e) {
      e.preventDefault();

      const submitButton = formElement.querySelector('button[type="submit"]');
      const originalText = submitButton?.textContent;

      try {
        // Show loading state
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.textContent = form.submitButton.loading;
        }

        // Submit to Formspark
        const formDataToSubmit = new FormData(formElement);

        try {
          await fetch(formElement.action, {
            method: 'POST',
            body: formDataToSubmit
          });
        } catch (fetchError) {
          // CORS error is expected with Formspark, but form was likely submitted successfully
          console.log('Expected CORS error, form should be submitted successfully');
        }

        // Calculate redirect URL using the slug
        const redirectUrl = `/${locale === 'es' ? 'es/' : ''}form/${formData.slug}/thank-you/`;

        // Small delay to ensure form submission completed
        setTimeout(() => {
          window.location.href = redirectUrl;
        }, 1000);

      } catch (error) {
        console.error('Form submission error:', error);

        // Reset button state
        if (submitButton && originalText) {
          submitButton.disabled = false;
          submitButton.textContent = originalText;
        }
      }
    });
  });
</script>