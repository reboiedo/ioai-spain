---
import { resolveFormTemplate, isValidTemplate } from '../config/formTemplates';

export interface Props {
  formData: {
    slug: string;
    formTemplate?: 'application' | 'download' | 'contact';
    form: {
      title: string;
      subtitle?: string;
      action?: string;
      fields?: Array<{
        type: 'text' | 'email' | 'select' | 'textarea' | 'checkbox' | 'radio';
        name: string;
        label: string;
        placeholder?: string;
        required: boolean;
        options?: Array<{
          value: string;
          label: string;
        }>;
      }>;
      submitButton?: {
        default: string;
        loading: string;
      };
      confirmationMessage?: string;
    };
  };
  locale: 'en' | 'es';
}

const { formData, locale } = Astro.props;

// Calculate redirect path (will be made absolute at runtime)
const redirectPath = `/${locale === 'es' ? 'es/' : ''}form/${formData.slug}/thank-you/`;

// Define the complete form type
type ResolvedForm = {
  title: string;
  subtitle?: string;
  action: string;
  fields: Array<{
    type: 'text' | 'email' | 'select' | 'textarea' | 'checkbox' | 'radio';
    name: string;
    label: string;
    placeholder?: string;
    required: boolean;
    options?: Array<{
      value: string;
      label: string;
    }>;
  }>;
  submitButton: {
    default: string;
    loading: string;
  };
  confirmationMessage?: string;
};

// Resolve form configuration - either from template or direct config
let resolvedForm: ResolvedForm;

if (formData.formTemplate && isValidTemplate(formData.formTemplate)) {
  // Use template resolution
  const template = resolveFormTemplate(formData.formTemplate, locale);
  resolvedForm = {
    title: formData.form.title,
    subtitle: formData.form.subtitle,
    action: formData.form.action || template.action,
    fields: template.fields,
    submitButton: formData.form.submitButton || template.submitButton,
    confirmationMessage: formData.form.confirmationMessage || template.confirmationMessage
  };
} else {
  // Use direct form configuration - ensure required fields are present
  if (!formData.form.fields || !formData.form.submitButton || !formData.form.action) {
    throw new Error(`Form "${formData.slug}" must either use a formTemplate or provide complete form configuration (fields, submitButton, action)`);
  }
  resolvedForm = formData.form as ResolvedForm;
}

const form = resolvedForm;
---

<section class="form-section">
  <div class="container">
    <div class="form-container">
      <div class="form-wrapper">
        <h1 class="form-title">{form.title}</h1>
        {form.subtitle && <p class="form-subtitle">{form.subtitle}</p>}

        <form
          id={`form-${formData.slug}`}
          action={form.action}
          method="POST"
          class="form"
          accept-charset="UTF-8"
          enctype="application/x-www-form-urlencoded"
        >
          <!-- Hidden field to identify form type -->
          <input type="hidden" name="formType" value={formData.slug} />

          <!-- Formspark redirect URL (will be set by JavaScript) -->
          <input type="hidden" name="_redirect" id={`redirect-${formData.slug}`} value="" />

          <!-- Guardian Notification (shown dynamically for under-14 students) -->
          <div id="guardian-notification" class="guardian-notification" style="display: none;">
            <div class="notification-icon">ℹ️</div>
            <div class="notification-content">
              <p class="notification-title" id="notification-title"></p>
              <p class="notification-message" id="notification-message"></p>
            </div>
          </div>

          {form.fields.map((field) => (
            <div class="form-group">
              {field.type === 'checkbox' ? (
                <!-- Checkbox Field -->
                <div class="checkbox-group">
                  <label class="checkbox-label">
                    <input
                      type="checkbox"
                      id={field.name}
                      name={field.name}
                      value="yes"
                      required={field.required}
                    />
                    <span class="consent-text">
                      {field.label}
                    </span>
                    {field.required && <span class="required">*</span>}
                  </label>
                </div>
              ) : field.type === 'select' ? (
                <!-- Select Field -->
                <>
                  <label for={field.name} class="form-label">
                    {field.label}
                    {field.required && <span class="required">*</span>}
                  </label>
                  <select
                    id={field.name}
                    name={field.name}
                    class="form-input form-select"
                    required={field.required}
                  >
                    <option value="" disabled selected>
                      {field.placeholder}
                    </option>
                    {field.options?.map((option) => (
                      <option value={option.value}>
                        {option.label}
                      </option>
                    ))}
                  </select>
                </>
              ) : field.type === 'textarea' ? (
                <!-- Textarea Field -->
                <>
                  <label for={field.name} class="form-label">
                    {field.label}
                    {field.required && <span class="required">*</span>}
                  </label>
                  <textarea
                    id={field.name}
                    name={field.name}
                    class="form-input form-textarea"
                    placeholder={field.placeholder}
                    required={field.required}
                    rows="4"
                  ></textarea>
                </>
              ) : field.type === 'radio' ? (
                <!-- Radio Button Field -->
                <div class="radio-group">
                  <label class="form-label">
                    {field.label}
                    {field.required && <span class="required">*</span>}
                  </label>
                  <div class="radio-options">
                    {field.options?.map((option) => (
                      <label class="radio-label">
                        <input
                          type="radio"
                          name={field.name}
                          value={option.value}
                          required={field.required}
                        />
                        <span class="radio-text">{option.label}</span>
                      </label>
                    ))}
                  </div>
                </div>
              ) : (
                <!-- Text/Email Fields -->
                <>
                  <label for={field.name} class="form-label">
                    {field.label}
                    {field.required && <span class="required">*</span>}
                  </label>
                  <input
                    type={field.type}
                    id={field.name}
                    name={field.name}
                    class="form-input"
                    placeholder={field.placeholder}
                    required={field.required}
                  />
                </>
              )}
            </div>
          ))}

          <!-- Confirmation Message -->
          {form.confirmationMessage && (
            <div class="form-group">
              <p class="confirmation-message">
                {form.confirmationMessage}
              </p>
            </div>
          )}

          <!-- Submit Button -->
          <div class="form-group">
            <button type="submit" class="submit-button">
              {form.submitButton.default}
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</section>

<style>
  .form-section {
    padding: var(--space-xl) var(--section-inline);
    background: var(--background-primary);
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .container {
    max-width: var(--max-width);
    margin: 0 auto;
  }

  .form-container {
    max-width: 500px;
    margin: 0 auto;
  }

  .form-wrapper {
    background: var(--background-elevated);
    border-radius: 12px;
    padding: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    border: 1px solid var(--border-primary);
  }

  .form-title {
    font-size: 1.75rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    color: var(--text-primary);
    text-align: center;
  }

  .form-subtitle {
    font-size: var(--font-size-base);
    font-weight: var(--font-weight-light);
    color: var(--text-secondary);
    margin-bottom: 2rem;
    text-align: center;
    line-height: 1.6;
  }

  .form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-label {
    font-weight: 600;
    color: var(--text-primary);
    font-size: 0.95rem;
  }

  .required {
    color: #ef4444 !important;
    margin-left: 0.25rem;
  }

  .form-input,
  .form-select,
  .form-textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--border-primary);
    border-radius: 6px;
    font-size: 1rem;
    background: var(--background-primary);
    color: var(--text-primary);
    transition: border-color 0.2s, box-shadow 0.2s;
  }

  .form-input:focus,
  .form-select:focus,
  .form-textarea:focus {
    outline: none;
    border-color: #0066cc;
    box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.1);
  }

  .form-input::placeholder,
  .form-textarea::placeholder {
    color: #6b7280;
    font-weight: 400;
  }

  .form-select {
    cursor: pointer;
    appearance: none;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.75rem center;
    background-repeat: no-repeat;
    background-size: 1.5rem;
    padding-right: 2.5rem;
  }

  .form-select option[value=""][disabled] {
    color: #9ca3af;
  }

  .form-textarea {
    resize: vertical;
    min-height: 100px;
  }

  .checkbox-group {
    margin: 1rem 0;
  }

  .checkbox-label {
    display: flex;
    align-items: flex-start;
    cursor: pointer;
    font-size: 0.95rem;
    color: var(--text-primary);
  }

  .checkbox-label input[type="checkbox"] {
    margin-right: 0.75rem;
    margin-top: 0.125rem;
    width: 1.25rem;
    height: 1.25rem;
    cursor: pointer;
    accent-color: #0066cc;
  }

  .checkbox-label .consent-text {
    flex: 1;
    line-height: 1.5;
  }

  .radio-group {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .radio-options {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .radio-label {
    display: flex;
    align-items: center;
    cursor: pointer;
    padding: 0.75rem 1rem;
    border: 1px solid var(--border-primary);
    border-radius: 6px;
    background: var(--background-primary);
    transition: border-color 0.2s, background-color 0.2s;
  }

  .radio-label:hover {
    border-color: #0066cc;
    background: rgba(0, 102, 204, 0.02);
  }

  .radio-label input[type="radio"] {
    margin-right: 0.75rem;
    width: 1.125rem;
    height: 1.125rem;
    cursor: pointer;
    accent-color: #0066cc;
  }

  .radio-label input[type="radio"]:checked + .radio-text {
    font-weight: 600;
    color: #0066cc;
  }

  .radio-label:has(input[type="radio"]:checked) {
    border-color: #0066cc;
    background: rgba(0, 102, 204, 0.05);
  }

  .radio-text {
    flex: 1;
    line-height: 1.5;
    color: var(--text-primary);
    transition: color 0.2s, font-weight 0.2s;
  }

  .guardian-notification {
    display: flex;
    gap: 0.75rem;
    padding: 1rem;
    background: #dbeafe;
    border: 1px solid #93c5fd;
    border-radius: 8px;
    margin-bottom: 1.5rem;
  }

  .notification-icon {
    font-size: 1.5rem;
    flex-shrink: 0;
  }

  .notification-content {
    flex: 1;
  }

  .notification-title {
    font-weight: 600;
    color: #1e40af;
    margin: 0 0 0.25rem 0;
    font-size: 0.95rem;
  }

  .notification-message {
    color: #1e3a8a;
    font-size: 0.9rem;
    line-height: 1.5;
    margin: 0;
  }

  .confirmation-message {
    color: var(--text-secondary);
    font-size: 0.9rem;
    line-height: 1.5;
    padding: 1rem;
    background: #f3f4f6;
    border-radius: 6px;
    border: 1px solid #e5e7eb;
  }

  .submit-button {
    width: 100%;
    padding: 0.875rem 1.5rem;
    background: #0066cc;
    color: white;
    font-weight: 600;
    font-size: 1rem;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: background 0.2s, transform 0.1s;
  }

  .submit-button:hover {
    background: #0052a3;
    transform: translateY(-1px);
  }

  .submit-button:active {
    transform: translateY(0);
  }

  .submit-button:disabled {
    background: #9ca3af;
    cursor: not-allowed;
    transform: none;
  }

  /* Mobile Responsiveness */
  @media (max-width: 768px) {
    .form-section {
      padding: var(--space-l) var(--section-inline);
    }

    .form-wrapper {
      padding: 1.5rem;
    }

    .form-input,
    .form-select,
    .form-textarea {
      font-size: 16px; /* Prevents zoom on iOS */
    }
  }
</style>

<script define:vars={{ formData, form, locale, redirectPath }}>
  // Handle form submission with runtime redirect URL
  document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 GenericForm script loaded for form:', formData.slug);
    const formElement = document.getElementById(`form-${formData.slug}`);
    const redirectField = document.getElementById(`redirect-${formData.slug}`);

    if (!formElement) {
      console.error('🚀 Form element not found:', `form-${formData.slug}`);
      return;
    }

    if (!redirectField) {
      console.error('🚀 Redirect field not found:', `redirect-${formData.slug}`);
      return;
    }

    // Build absolute redirect URL using current origin
    const redirectUrl = `${window.location.origin}${redirectPath}`;
    redirectField.value = redirectUrl;

    console.log('🚀 Form element found:', formElement);
    console.log('🚀 Form action URL:', formElement.action);
    console.log('🚀 Redirect URL set to:', redirectUrl);

    // === Conditional Form Logic ===
    // Get field groups
    const getFieldGroup = (fieldName) => {
      const input = formElement.querySelector(`[name="${fieldName}"]`);
      return input?.closest('.form-group');
    };

    const roleGroup = getFieldGroup('role');
    const participantAgeGroup = getFieldGroup('participantAge');
    const guardianNameGroup = getFieldGroup('guardianName');
    const guardianEmailGroup = getFieldGroup('guardianEmail');

    // Debug: Check if all fields exist
    console.log('📋 Field groups found:', {
      roleGroup: !!roleGroup,
      participantAgeGroup: !!participantAgeGroup,
      guardianNameGroup: !!guardianNameGroup,
      guardianEmailGroup: !!guardianEmailGroup
    });

    if (!roleGroup) console.error('❌ role field group not found!');
    if (!participantAgeGroup) console.error('❌ participantAge field group not found!');
    if (!guardianNameGroup) console.error('❌ guardianName field group not found!');
    if (!guardianEmailGroup) console.error('❌ guardianEmail field group not found!');

    // Get labels for dynamic updates
    const participantAgeLabel = formElement.querySelector('label.form-label:has(+ .radio-options input[name="participantAge"])');
    const fullNameLabel = formElement.querySelector('label[for="fullName"]');
    const emailLabel = formElement.querySelector('label[for="email"]');
    const consentLabel = formElement.querySelector('input[name="consent"]')?.closest('.checkbox-label')?.querySelector('.consent-text');
    const guardianNotification = document.getElementById('guardian-notification');
    const notificationTitle = document.getElementById('notification-title');
    const notificationMessage = document.getElementById('notification-message');

    // Helper function to show/hide and manage required state
    function setFieldVisibility(fieldGroup, visible, required = false) {
      if (!fieldGroup) return;

      fieldGroup.style.display = visible ? 'flex' : 'none';

      // Find input/select/textarea in the group
      const input = fieldGroup.querySelector('input:not([type="radio"]), select, textarea');
      if (input) {
        input.required = required;
        input.disabled = !visible; // Disabled fields don't submit
        if (!visible) input.value = '';
      }

      // Handle radio buttons separately
      const radioInputs = fieldGroup.querySelectorAll('input[type="radio"]');
      radioInputs.forEach(radio => {
        radio.required = required;
        radio.disabled = !visible; // Disabled fields don't submit
        if (!visible) radio.checked = false;
      });

      // Update the asterisk in the label
      const label = fieldGroup.querySelector('label.form-label, label[for]');
      if (label) {
        let asterisk = label.querySelector('.required');
        if (required && !asterisk) {
          // Add asterisk if it doesn't exist
          asterisk = document.createElement('span');
          asterisk.className = 'required';
          asterisk.style.color = '#ef4444';
          asterisk.style.marginLeft = '0.25rem';
          asterisk.textContent = ' *';
          label.appendChild(asterisk);
        } else if (!required && asterisk) {
          // Remove asterisk if it exists
          asterisk.remove();
        }
      }
    }

    // Update form display based on current selections
    function updateFormDisplay() {
      const signUpFor = formElement.querySelector('input[name="signUpFor"]:checked')?.value;
      const role = formElement.querySelector('select[name="role"]')?.value;
      const participantAge = formElement.querySelector('input[name="participantAge"]:checked')?.value;

      console.log('🔄 Update form display:', { signUpFor, role, participantAge });

      // Rule 1: Show role field only if "myself" is selected
      const showRole = signUpFor === 'myself';
      console.log('  → Rule 1 (role):', { signUpFor, showRole });
      if (showRole) {
        setFieldVisibility(roleGroup, true, true);
      } else {
        setFieldVisibility(roleGroup, false, false);
      }

      // Rule 2: Show participantAge field based on signUpFor + role
      let showAge = false;
      if (signUpFor === 'myself' && role === 'student') {
        console.log('  → Rule 2 (age): myself + student = SHOW');
        showAge = true;
      } else if (signUpFor === 'my-child') {
        console.log('  → Rule 2 (age): my-child = SHOW');
        showAge = true;
      } else {
        console.log('  → Rule 2 (age): conditions not met = HIDE', { signUpFor, role });
      }
      setFieldVisibility(participantAgeGroup, showAge, showAge);

      // Rule 3: Show guardian fields and notification
      let showGuardian = false;
      let showNotification = false;

      if (signUpFor === 'myself' && role === 'student' && participantAge === 'under14') {
        showGuardian = true;
        showNotification = true; // Show notification for under-14 students
      } else if (signUpFor === 'my-child') {
        showGuardian = true;
        showNotification = false; // Don't show notification for parents signing up child
      }

      setFieldVisibility(guardianNameGroup, showGuardian, showGuardian);
      setFieldVisibility(guardianEmailGroup, showGuardian, showGuardian);

      // Show/hide guardian notification and position it correctly
      if (guardianNotification && notificationTitle && notificationMessage) {
        if (showNotification) {
          const notificationTexts = {
            en: {
              title: 'Parent/Guardian Required',
              message: 'Since you are under 14, a parent or guardian must complete the rest of this application on your behalf.'
            },
            es: {
              title: 'Se Requiere Padre/Madre/Tutor',
              message: 'Como eres menor de 14 años, un padre/madre o tutor debe completar el resto de esta solicitud en tu nombre.'
            }
          };
          const lang = locale || 'en';
          notificationTitle.textContent = notificationTexts[lang].title;
          notificationMessage.textContent = notificationTexts[lang].message;
          guardianNotification.style.display = 'flex';

          // Position notification between age question and guardian name
          if (participantAgeGroup && guardianNameGroup) {
            // Insert notification after the age group
            participantAgeGroup.parentNode.insertBefore(guardianNotification, guardianNameGroup);
          }
        } else {
          guardianNotification.style.display = 'none';
        }
      }

      // Rule 4: Update dynamic labels
      if (participantAgeLabel) {
        const labels = {
          en: {
            myself: 'Are you 14 years old or older?',
            someoneElse: 'Is the participant 14 years old or older?'
          },
          es: {
            myself: '¿Tienes 14 años o más?',
            someoneElse: '¿El participante tiene 14 años o más?'
          }
        };
        const lang = locale || 'en';
        const labelKey = signUpFor === 'myself' ? 'myself' : 'someoneElse';
        participantAgeLabel.childNodes[0].textContent = labels[lang][labelKey] + ' ';
      }

      // Update fullName and email labels
      if (fullNameLabel && emailLabel) {
        const labels = {
          en: {
            participantName: 'Participant Full Name',
            yourName: 'Your Full Name',
            participantEmail: 'Participant Email',
            yourEmail: 'Your Email'
          },
          es: {
            participantName: 'Nombre Completo del Participante',
            yourName: 'Tu Nombre Completo',
            participantEmail: 'Email del Participante',
            yourEmail: 'Tu Email'
          }
        };
        const lang = locale || 'en';

        if (signUpFor === 'my-child') {
          fullNameLabel.childNodes[0].textContent = labels[lang].participantName + ' ';
          emailLabel.childNodes[0].textContent = labels[lang].participantEmail + ' ';
        } else {
          fullNameLabel.childNodes[0].textContent = labels[lang].yourName + ' ';
          emailLabel.childNodes[0].textContent = labels[lang].yourEmail + ' ';
        }
      }

      // Update guardian field labels when signing up child
      if (signUpFor === 'my-child') {
        const guardianNameLabel = guardianNameGroup?.querySelector('label');
        const guardianEmailLabel = guardianEmailGroup?.querySelector('label');

        const labels = {
          en: {
            guardianName: 'Your Full Name (Guardian)',
            guardianEmail: 'Your Email (Guardian)'
          },
          es: {
            guardianName: 'Tu Nombre Completo (Tutor)',
            guardianEmail: 'Tu Email (Tutor)'
          }
        };
        const lang = locale || 'en';

        if (guardianNameLabel) guardianNameLabel.childNodes[0].textContent = labels[lang].guardianName + ' ';
        if (guardianEmailLabel) guardianEmailLabel.childNodes[0].textContent = labels[lang].guardianEmail + ' ';
      }

      // Rule 5: Update consent checkbox label based on context
      // Only apply dynamic label if form has conditional fields (signUpForRadios exist)
      if (consentLabel && signUpForRadios.length > 0) {
        const consentTexts = {
          en: {
            default: 'I consent to receiving emails',
            under14: 'I am the parent/guardian and give consent for my child to participate and receive emails',
            guardianForSomeone: 'I give consent for my child to participate and receive emails'
          },
          es: {
            default: 'Acepto recibir correos electrónicos',
            under14: 'Soy el padre/madre/tutor y doy mi consentimiento para que mi hijo/a participe y reciba correos electrónicos',
            guardianForSomeone: 'Doy mi consentimiento para que mi hijo/a participe y reciba correos electrónicos'
          }
        };
        const lang = locale || 'en';

        // Determine which consent text to use
        let consentKey = 'default';
        if (signUpFor === 'myself' && role === 'student' && participantAge === 'under14') {
          consentKey = 'under14';
        } else if (signUpFor === 'my-child') {
          consentKey = 'guardianForSomeone';
        }

        consentLabel.textContent = consentTexts[lang][consentKey];
      }
    }

    // Add event listeners
    const signUpForRadios = formElement.querySelectorAll('input[name="signUpFor"]');
    const roleSelect = formElement.querySelector('select[name="role"]');
    const participantAgeRadios = formElement.querySelectorAll('input[name="participantAge"]');

    signUpForRadios.forEach(radio => radio.addEventListener('change', updateFormDisplay));
    if (roleSelect) roleSelect.addEventListener('change', updateFormDisplay);
    participantAgeRadios.forEach(radio => radio.addEventListener('change', updateFormDisplay));

    // Initial display update
    updateFormDisplay();

    // Form submission handler
    formElement.addEventListener('submit', function(e) {
      console.log('🚀 Form submit event triggered - using native submission!');

      // Disable signUpFor field so it doesn't submit (UI-only field)
      signUpForRadios.forEach(radio => radio.disabled = true);

      const submitButton = formElement.querySelector('button[type="submit"]');

      // Show loading state (form will submit naturally)
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.textContent = form.submitButton.loading;
      }

      // Let the form submit naturally to Formspark
      // Formspark will handle the redirect using the _redirect hidden field
    });
  });
</script>