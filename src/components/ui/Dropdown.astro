---
import { Image } from 'astro:assets';
import dropdownIcon from '@/assets/icons/material-dropdown.svg';

export interface Props {
  options: Array<{
    value: string;
    label: string;
    selected?: boolean;
  }>;
  size?: 'small' | 'medium' | 'large';
  className?: string;
  ariaLabel?: string;
  onChange?: string;
}

const {
  options,
  size = 'medium',
  className = '',
  ariaLabel,
  onChange
} = Astro.props;

const sizeClasses = {
  small: 'dropdown--small',
  medium: 'dropdown--medium',
  large: 'dropdown--large'
};

const classes = [
  'dropdown',
  sizeClasses[size],
  className
].filter(Boolean).join(' ');
---

<div class={classes}>
  <select
    class="dropdown__select"
    aria-label={ariaLabel}
    onchange={onChange}
  >
    {options.map(option => (
      <option
        value={option.value}
        selected={option.selected}
      >
        {option.label}
      </option>
    ))}
  </select>
  <div class="dropdown__display">
    <span class="dropdown__text">{options.find(opt => opt.selected)?.label || options[0]?.label}</span>
    <Image src={dropdownIcon} alt="" class="dropdown__icon" aria-hidden="true" width={24} height={24} loading="lazy" format="svg" />
  </div>
</div>

<style>
  .dropdown {
    display: inline-flex;
    align-items: center;
    border: 2px solid var(--text-primary);
    border-radius: var(--radius-md);
    background: transparent;
    transition: all 0.2s ease;
    box-sizing: border-box;
    position: relative;
  }

  .dropdown:hover {
    border-color: var(--color-primary);
  }

  .dropdown:focus-within {
    box-shadow: 0 0 0 3px var(--border-focus);
  }

  .dropdown__select {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
    background: transparent;
    color: var(--text-primary);
    cursor: pointer;
    font-family: var(--font-sans);
    font-weight: var(--font-weight-medium);
    line-height: var(--line-height-tight);
    appearance: none;
    outline: none;
    z-index: 1;
    opacity: 0;
  }

  .dropdown__display {
    display: flex;
    align-items: center;
    width: 100%;
    pointer-events: none;
    z-index: 0;
  }

  .dropdown__text {
    flex: 1;
    color: var(--text-primary);
    font-family: var(--font-sans);
    font-weight: var(--font-weight-medium);
    line-height: var(--line-height-tight);
  }

  .dropdown__icon {
    pointer-events: none;
    flex-shrink: 0;
    margin-left: var(--space-3xs);
    height: var(--space-s);
    width: var(--space-s);
  }

  /* Size variants */
  .dropdown--small {
    padding: var(--space-xs) calc(var(--space-xs) * 1);
  }

  .dropdown--small .dropdown__text {
    font-size: var(--font-size-14);
  }

  .dropdown--small .dropdown__icon {
    width: var(--font-size-14);
    height: var(--font-size-14);
  }

  .dropdown--medium {
    padding: calc(var(--space-xs) * 1) var(--space-s);
  }

  .dropdown--medium .dropdown__text {
    font-size: var(--font-size-base);
  }

  .dropdown--medium .dropdown__icon {
    width: var(--font-size-base);
    height: var(--font-size-base);
  }

  .dropdown--large {
    padding: var(--space-s) calc(var(--space-s) * 1);
  }

  .dropdown--large .dropdown__text {
    font-size: var(--font-size-md);
  }

  .dropdown--large .dropdown__icon {
    width: var(--font-size-md);
    height: var(--font-size-md);
  }

  /* Mobile adjustments */
  @media (max-width: 768px) {
    .dropdown--small {
      padding: var(--space-xs) calc(var(--space-xs) * 0.75);
    }

    .dropdown--small .dropdown__text {
      font-size: var(--font-size-14);
    }

    .dropdown--small .dropdown__icon {
      width: var(--font-size-14);
      height: var(--font-size-14);
    }
  }
</style>