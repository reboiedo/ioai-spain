---
export interface Props {
  images: Array<{
    src: string;
    alt: string;
    circular?: boolean;
  }>;
  direction?: 'left' | 'right';
  speed?: number;
}

const {
  images,
  direction = 'left',
  speed = 50
} = Astro.props;
---

<div class="marquee-images" data-marquee data-direction={direction} data-speed={speed}>
  <div class="marquee-images__track">
    {images.map((image) => (
      <div class="marquee-images__item">
        <img
          src={image.src}
          alt={image.alt}
          loading="lazy"
          class:list={[{ circular: image.circular }]}
        />
      </div>
    ))}
  </div>
</div>

<script>
  import { gsap } from 'gsap';

  function initMarquee() {
    document.querySelectorAll('[data-marquee]').forEach((marquee) => {
      const track = marquee.querySelector('.marquee-images__track') as HTMLElement;
      if (!track) return;

      const direction = marquee.getAttribute('data-direction') || 'left';
      const speed = parseFloat(marquee.getAttribute('data-speed') || '50');

      // Clone the track content to create seamless loop
      const clone = track.cloneNode(true) as HTMLElement;
      marquee.appendChild(clone);

      // Get the width of one track including gap
      const items = track.querySelectorAll('.marquee-images__item');
      const computedStyle = window.getComputedStyle(track);
      const gap = parseFloat(computedStyle.gap) || 24;
      const trackWidth = track.offsetWidth + gap;

      console.log('Track width:', track.offsetWidth, 'Gap:', gap, 'Total:', trackWidth);

      // Position both tracks side by side
      gsap.set(track, { x: 0 });
      gsap.set(clone, { x: trackWidth });

      // Create infinite animation using wrap
      const wrapValue = gsap.utils.wrap(-trackWidth, trackWidth);

      gsap.to([track, clone], {
        x: direction === 'left' ? `-=${trackWidth}` : `+=${trackWidth}`,
        duration: speed,
        ease: 'none',
        repeat: -1,
        modifiers: {
          x: (x: string) => wrapValue(parseFloat(x)) + 'px'
        }
      });
    });
  }

  initMarquee();
  document.addEventListener('astro:page-load', initMarquee);
</script>

<style>
  .marquee-images {
    width: 100vw;
    position: relative;
    overflow: hidden;
    margin: 48px 0 0;
    left: 50%;
    right: 50%;
    margin-left: -50vw;
    margin-right: -50vw;
    height: 358px;
  }

  .marquee-images__track {
    display: flex;
    gap: 24px;
    position: absolute;
    left: 0;
    top: 0;
    will-change: transform;
  }

  .marquee-images__item {
    flex-shrink: 0;
  }

  .marquee-images__item img {
    width: 358px;
    height: 358px;
    object-fit: cover;
    border-radius: 48px;
    display: block;
  }

  .marquee-images__item img.circular {
    border-radius: 50%;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .marquee-images {
      margin: 32px 0 0;
      height: 280px;
    }

    .marquee-images__track {
      gap: 16px;
    }

    .marquee-images__item img {
      width: 280px;
      height: 280px;
    }
  }

  @media (max-width: 480px) {
    .marquee-images {
      margin: 24px 0 0;
      height: 220px;
    }

    .marquee-images__item img {
      width: 220px;
      height: 220px;
    }
  }
</style>
