---
export interface Props {
  t: {
    registration: {
      sectionTitle: string;
      fields: {
        fullName: {
          label: string;
          placeholder: string;
        };
        schoolName: {
          label: string;
          placeholder: string;
        };
        role: {
          label: string;
          placeholder: string;
          options: {
            student: string;
            teacher: string;
            parent: string;
            other: string;
          };
        };
        email: {
          label: string;
          placeholder: string;
        };
        consent: {
          label: string;
        };
      };
      submitButton: string;
      confirmationMessage: string;
      successMessage: string;
      errorMessage: string;
    };
  };
}

const { t } = Astro.props;

// Formspark form ID for IOAI Spain registrations
const FORMSPARK_FORM_ID = "p2kDhINPt";
const FORM_ACTION = `https://submit-form.com/${FORMSPARK_FORM_ID}`;

// Determine redirect URL based on current locale
const locale = Astro.currentLocale || 'en';
const redirectUrl = locale === 'es' ? '/es/thank-you/' : '/thank-you/';
---

<div id="registration-popover" popover="auto" class="registration-popover">
  <div class="popover-content">
    <div class="popover-header">
      <h2 class="popover-title">{t.registration.sectionTitle}</h2>
      <button class="close-button" popovertarget="registration-popover" popovertargetaction="hide" aria-label="Close">
        <span class="close-icon">Ã—</span>
      </button>
    </div>

    <form
      class="registration-form"
      action={FORM_ACTION}
      method="POST"
      accept-charset="UTF-8"
      enctype="application/x-www-form-urlencoded"
    >

      <div class="form-grid">
        <!-- Full Name -->
        <div class="form-group">
          <label for="fullName" class="form-label">
            {t.registration.fields.fullName.label}
            <span class="required">*</span>
          </label>
          <input
            type="text"
            id="fullName"
            name="fullName"
            class="form-input"
            placeholder={t.registration.fields.fullName.placeholder}
            required
          />
        </div>

        <!-- School Name -->
        <div class="form-group">
          <label for="schoolName" class="form-label">
            {t.registration.fields.schoolName.label}
            <span class="required">*</span>
          </label>
          <input
            type="text"
            id="schoolName"
            name="schoolName"
            class="form-input"
            placeholder={t.registration.fields.schoolName.placeholder}
            required
          />
        </div>

        <!-- Role -->
        <div class="form-group">
          <label for="role" class="form-label">
            {t.registration.fields.role.label}
            <span class="required">*</span>
          </label>
          <select id="role" name="role" class="form-select" required>
            <option value="" disabled selected>{t.registration.fields.role.placeholder}</option>
            <option value="student">{t.registration.fields.role.options.student}</option>
            <option value="teacher">{t.registration.fields.role.options.teacher}</option>
            <option value="parent">{t.registration.fields.role.options.parent}</option>
            <option value="other">{t.registration.fields.role.options.other}</option>
          </select>
        </div>

        <!-- Email -->
        <div class="form-group">
          <label for="email" class="form-label">
            {t.registration.fields.email.label}
            <span class="required">*</span>
          </label>
          <input
            type="email"
            id="email"
            name="email"
            class="form-input"
            placeholder={t.registration.fields.email.placeholder}
            required
          />
        </div>

        <!-- Consent Checkbox -->
        <div class="form-group form-group--full">
          <div class="checkbox-group">
            <label class="checkbox-label">
              <input
                type="checkbox"
                id="consent"
                name="consent"
                value="yes"
                required
              />
              <span class="consent-text">
                {t.registration.fields.consent.label}
              </span>
              <span class="required">*</span>
            </label>
          </div>
        </div>

        <!-- Confirmation Message -->
        <div class="form-group form-group--full">
          <p class="confirmation-message">
            {t.registration.confirmationMessage}
          </p>
        </div>

        <!-- Submit Button -->
        <div class="form-group form-group--full">
          <button type="submit" class="submit-button">
            {t.registration.submitButton}
          </button>
        </div>
      </div>
    </form>
  </div>
</div>

<style>
  .registration-popover {
    max-width: 500px;
    max-height: 90vh;
    width: 90vw;
    padding: 0;
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-xl);
    background: white;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
    overflow: hidden;
    margin: auto;
  }

  .registration-popover::backdrop {
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
  }

  .popover-content {
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .popover-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-s) var(--space-l);
    border-bottom: 1px solid var(--border-secondary);
    background: var(--background-elevated);
  }

  .popover-title {
    margin: 0;
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-medium);
    color: var(--text-primary);
  }

  .close-button {
    background: none;
    border: none;
    cursor: pointer;
    padding: var(--space-xs);
    border-radius: var(--radius-sm);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s ease;
  }

  .close-button:hover {
    background-color: var(--background-secondary);
  }

  .close-icon {
    font-size: var(--font-size-xl);
    line-height: 1;
    color: var(--text-secondary);
  }

  .registration-form {
    padding: var(--space-l);
    flex: 1;
    overflow-y: auto;
  }

  .form-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-s);
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: var(--space-3xs);
  }

  .form-group--full {
    grid-column: 1 / -1;
  }

  .form-label {
    display: block;
    font-weight: 600;
    /* margin-bottom: 0.5rem; */
    color: #333;
    font-size: 0.95rem;
  }

  .required {
    color: #ef4444;
    margin-left: 0.25rem;
  }

  .form-input,
  .form-select {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 1rem;
    background: white;
    transition: border-color 0.2s, box-shadow 0.2s;
  }

  .form-input:focus,
  .form-select:focus {
    outline: none;
    border-color: #0066cc;
    box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.1);
  }

  .form-input::placeholder {
    color: #9ca3af;
  }

  .form-select {
    cursor: pointer;
    appearance: none;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.75rem center;
    background-repeat: no-repeat;
    background-size: 1.5rem;
    padding-right: 2.5rem;
  }

  .checkbox-group {
    /* margin: 1.5rem 0; */
    grid-column: 1/-1;
  }

  .checkbox-label {
    display: flex;
    align-items: flex-start;
    cursor: pointer;
    font-size: 0.95rem;
    color: #333;
  }

  .checkbox-label input[type="checkbox"] {
    margin-right: 0.75rem;
    margin-top: 0.125rem;
    width: 1.25rem;
    height: 1.25rem;
    cursor: pointer;
    accent-color: #0066cc;
  }

  .checkbox-label .consent-text {
    flex: shrink;
    line-height: 1.5;
  }

  .confirmation-message {
    color: #666;
    font-size: 0.9rem;
    line-height: 1.5;
    /* margin: 1rem 0 1.5rem; */
    padding: 1rem;
    background: #f3f4f6;
    border-radius: 6px;
  }

  .submit-button {
    width: 100%;
    padding: 0.875rem 1.5rem;
    background: #0066cc;
    color: white;
    font-weight: 600;
    font-size: 1rem;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: background 0.2s, transform 0.1s;
  }

  .submit-button:hover {
    background: #0052a3;
    transform: translateY(-1px);
  }

  .submit-button:active {
    transform: translateY(0);
  }

  .submit-button:disabled {
    background: #9ca3af;
    cursor: not-allowed;
    transform: none;
  }


  /* Mobile adjustments */
  @media (max-width: 809px) { /* mobile only */
    .registration-popover {
      width: calc(100vw - 16px);
      height: calc(100vh - 16px);
      position: fixed;
      top: 8px;
      left: 8px;
      right: 8px;
      bottom: 8px;
      transform: none;
      margin: 0;
      max-width: none;
      max-height: none;
    }

    .popover-content {
      height: 100%;
      overflow: hidden;
    }

    .popover-header {
      padding: var(--space-m);
      flex-shrink: 0;
    }

    .registration-form {
      padding: var(--space-m);
      flex: 1;
      overflow-y: auto;
      -webkit-overflow-scrolling: touch;
    }

    .popover-title {
      font-size: var(--font-size-lg);
    }

    .form-grid {
      gap: var(--space-s);
    }
  }
</style>

<script>
  // Handle popover form submission and redirect
  const popoverForm = document.querySelector('.registration-form') as HTMLFormElement;

  if (popoverForm) {
    popoverForm.addEventListener('submit', async function(e) {
      e.preventDefault();

      const submitButton = popoverForm.querySelector('button[type="submit"]') as HTMLButtonElement;
      const originalText = submitButton?.textContent;

      try {
        // Show loading state
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.textContent = 'Submitting...';
        }

        // Submit to Formspark
        const formData = new FormData(popoverForm);

        try {
          await fetch(popoverForm.action, {
            method: 'POST',
            body: formData
          });
        } catch (fetchError) {
          // CORS error is expected with Formspark, but form was likely submitted successfully
          console.log('Expected CORS error, form should be submitted successfully');
        }

        // Always redirect after submission attempt (Formspark likely received the data)
        // Determine redirect URL based on current page locale
        const isSpanish = window.location.pathname.startsWith('/es');
        const redirectUrl = isSpanish ? '/es/thank-you/' : '/thank-you/';

        // Small delay to ensure form submission completed
        setTimeout(() => {
          window.location.href = redirectUrl;
        }, 1000);

      } catch (error) {
        console.error('Popover form submission error:', error);
        alert('There was an error submitting the form. Please try again.');

        // Reset button
        if (submitButton && originalText) {
          submitButton.disabled = false;
          submitButton.textContent = originalText;
        }
      }
    });
  }
</script>