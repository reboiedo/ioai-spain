---
import Button from "@/components/ui/Button.astro";

export interface Props {
  t: {
    banners: Array<{
      id: string;
      title: string;
      description: string;
      buttonText: string;
      buttonUrl: string;
      backgroundJson: string;
      backgroundColor: string;
      order: number;
    }>;
  };
}

const { t } = Astro.props;
const sortedBanners = t.banners.sort((a, b) => a.order - b.order);
---

<section class="banner-section">
  <div class="banner" data-slides={JSON.stringify(sortedBanners.map(b => ({ id: b.id, backgroundJson: b.backgroundJson, backgroundColor: b.backgroundColor })))}>
    <!-- Unicorn Studio Backgrounds - One for each banner -->
    {sortedBanners.map((banner, index) => (
      <div
        class="unicorn-embed unicorn-background"
        data-us-project-src={banner.backgroundJson}
        data-us-scale="1"
        data-us-dpi="1.5"
        data-background-index={index}
        data-active={index === 0}
      ></div>
    ))}

    <!-- Wrappers with Background Colors - One for each banner -->
    {sortedBanners.map((banner, index) => (
      <div
        class="wrapper"
        data-wrapper-index={index}
        data-active={index === 0}
        style={`background-color: ${banner.backgroundColor};`}
      >
        <div class="slider-container">
          <div
            class="slide"
            data-slide-index={index}
            data-active={index === 0}
          >
            <div class="text-wrapper">
              <h3>{banner.title}</h3>
              <p>{banner.description}</p>
            </div>
            <Button
              variant="secondary"
              href={banner.buttonUrl}
            >
              {banner.buttonText}
            </Button>
          </div>
        </div>
      </div>
    ))}

    <!-- Dot Indicators -->
    {sortedBanners.length > 1 && (
      <div class="dot-indicators">
        {sortedBanners.map((_, index) => (
          <button
            class="dot"
            data-slide={index}
            aria-label={`Go to slide ${index + 1}`}
            data-active={index === 0}
          />
        ))}
      </div>
    )}
  </div>
</section>

<style>
  .banner-section {
    padding-inline: var(--section-inline);
  }

  .banner {
    max-width: var(--max-width);
    background-color: var(--background-secondary);
    color: var(--text-inverse);
    margin: 0 auto;
    padding-inline: var(--space-l);
    border-radius: 16px;
    text-align: center;
    position: relative;
    overflow: hidden;
    min-height: 320px;
  }

  /* Wrappers with different background colors */
  .wrapper {
    max-width: 600px;
    padding: var(--space-xl) var(--card-inline);
    margin: 0 auto;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.5s ease-in-out, visibility 0s 0.5s;
    pointer-events: none;
    background-color: black; /* Default fallback */
  }

  .wrapper[data-active="true"] {
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
    transition: opacity 0.5s ease-in-out, visibility 0s 0s;
  }

  /* Slider Container */
  .slider-container {
    position: relative;
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 40px;
    align-items: center;
  }

  .slide {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 40px;
    align-items: center;
  }

  .text-wrapper {
    display: flex;
    flex-direction: column;
    row-gap: 8px;
    text-align: center;
  }

  /* Unicorn Studio Background Styles */
  .unicorn-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    pointer-events: none;
    border-radius: 24px;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.5s ease-in-out, visibility 0s 0.5s;
  }

  .unicorn-background[data-active="true"] {
    opacity: 1;
    visibility: visible;
    transition: opacity 0.5s ease-in-out, visibility 0s 0s;
  }

  .unicorn-background canvas {
    width: 100% !important;
    height: 100% !important;
    display: block !important;
  }

  /* Dot Indicators */
  .dot-indicators {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 10px;
    z-index: 2;
  }

  .dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.4);
    border: none;
    cursor: pointer;
    padding: 0;
    transition: all 0.3s ease;
  }

  .dot:hover {
    background-color: rgba(255, 255, 255, 0.6);
    transform: scale(1.1);
  }

  .dot[data-active="true"] {
    background-color: rgba(255, 255, 255, 0.9);
    width: 12px;
    height: 12px;
  }

  @media(max-width: 810px) {
    .banner {
      padding-inline: 0;
      padding-block: var(--space-2xl);
      min-height: 480px;
    }

    .wrapper {
      max-width: none;
      width: 100%;
      left: 0;
      transform: translateY(-50%);
      padding: var(--space-xl) var(--space-m);
    }

    .wrapper[data-active="true"] {
      transform: translateY(-50%);
    }

    .dot-indicators {
      bottom: 16px;
    }
  }
</style>

<!-- Unicorn Studio Script (only load if not already loaded) -->
<script is:inline>
  // Check if UnicornStudio is already loaded, if not load it
  if (!window.UnicornStudio) {
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/gh/hiunicornstudio/unicornstudio.js@v1.4.33/dist/unicornStudio.umd.js';
    document.head.appendChild(script);
  }
</script>

<!-- Banner Slider Logic -->
<script>
  interface BannerSlide {
    id: string;
    backgroundJson: string;
    backgroundColor: string;
  }

  // Extend Window interface for UnicornStudio
  declare global {
    interface Window {
      UnicornStudio?: {
        init: () => Promise<void>;
      };
    }
  }

  // Slide data embedded from Astro
  const bannerElement = document.querySelector('.banner') as HTMLElement | null;
  const bannerSlides = JSON.parse(bannerElement?.dataset.slides || '[]') as BannerSlide[];

  function initBannerSlider() {
    const banner = document.querySelector('.banner');
    const slides = document.querySelectorAll('.banner .slide');
    const dots = document.querySelectorAll('.banner .dot');
    const backgrounds = document.querySelectorAll('.banner .unicorn-background');
    const wrappers = document.querySelectorAll('.banner .wrapper');

    if (!banner || slides.length <= 1) return;

    let currentIndex = 0;
    let autoRotateTimer: number | null = null;
    let isHovering = false;

    // Switch to a specific slide
    function goToSlide(index: number) {
      if (index === currentIndex) return;

      // Update slides
      slides.forEach((slide, i) => {
        slide.setAttribute('data-active', i === index ? 'true' : 'false');
      });

      // Update dots
      dots.forEach((dot, i) => {
        dot.setAttribute('data-active', i === index ? 'true' : 'false');
      });

      // Update backgrounds
      backgrounds.forEach((bg, i) => {
        bg.setAttribute('data-active', i === index ? 'true' : 'false');
      });

      // Update wrappers
      wrappers.forEach((wrapper, i) => {
        wrapper.setAttribute('data-active', i === index ? 'true' : 'false');
      });

      currentIndex = index;
    }

    // Auto-rotate slides
    function startAutoRotate() {
      if (autoRotateTimer) clearInterval(autoRotateTimer);
      autoRotateTimer = window.setInterval(() => {
        if (!isHovering) {
          const nextIndex = (currentIndex + 1) % slides.length;
          goToSlide(nextIndex);
        }
      }, 6500); // 6.5 seconds
    }

    // Dot click handlers
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        goToSlide(index);
        startAutoRotate(); // Reset timer
      });
    });

    // Pause on hover
    banner.addEventListener('mouseenter', () => {
      isHovering = true;
    });

    banner.addEventListener('mouseleave', () => {
      isHovering = false;
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        const prevIndex = (currentIndex - 1 + slides.length) % slides.length;
        goToSlide(prevIndex);
        startAutoRotate();
      } else if (e.key === 'ArrowRight') {
        const nextIndex = (currentIndex + 1) % slides.length;
        goToSlide(nextIndex);
        startAutoRotate();
      }
    });

    // Initialize Unicorn Studio
    function initUnicorn() {
      if (window.UnicornStudio) {
        window.UnicornStudio.init()
          .then(() => {
            console.log('Banner slider initialized');
            startAutoRotate();
          })
          .catch((err: unknown) => console.error('Unicorn init error:', err));
      } else {
        setTimeout(initUnicorn, 100);
      }
    }

    initUnicorn();
  }

  // Initialize on load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initBannerSlider);
  } else {
    initBannerSlider();
  }

  // Also support Astro view transitions
  document.addEventListener('astro:page-load', initBannerSlider);
</script>